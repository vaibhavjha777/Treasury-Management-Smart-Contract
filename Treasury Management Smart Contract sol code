// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

/// @title Treasury Management Contract
/// @notice Manages deposits, withdrawals, and ownership for a treasury
contract TreasuryManagement {
    address public owner;

    event Transaction(address indexed sender, uint256 amount, string transactionType);
    event OwnershipTransferred(address indexed oldOwner, address indexed newOwner);

    modifier onlyOwner() {
        require(msg.sender == owner, "Only owner can execute this action");
        _;
    }

    /// @notice Initializes the contract and sets the deployer as the owner
    constructor() {
        owner = msg.sender;
    }

    /// @notice Deposits ETH into the treasury
    /// @dev Emits a "Deposit" event
    function deposit() external payable {
        require(msg.value > 0, "Must send ETH to deposit");
        emit Transaction(msg.sender, msg.value, "Deposit");
    }

    /// @notice Accepts plain ETH transfers as donations
    /// @dev Emits a "Donation" event
    receive() external payable {
        emit Transaction(msg.sender, msg.value, "Donation");
    }

    /// @notice Withdraws ETH to the owner's address
    /// @param amount The amount of ETH to withdraw (in wei)
    function withdraw(uint256 amount) external onlyOwner {
        require(amount > 0, "Amount must be greater than 0");
        require(address(this).balance >= amount, "Insufficient contract balance");

        payable(owner).transfer(amount);
        emit Transaction(owner, amount, "Withdraw");
    }

    /// @notice Withdraws ETH to a specific recipient address
    /// @param recipient The address to receive the ETH
    /// @param amount The amount of ETH to withdraw (in wei)
    function withdrawTo(address payable recipient, uint256 amount) external onlyOwner {
        require(recipient != address(0), "Invalid recipient address");
        require(amount > 0, "Amount must be greater than 0");
        require(address(this).balance >= amount, "Insufficient contract balance");

        recipient.transfer(amount);
        emit Transaction(recipient, amount, "WithdrawToAddress");
    }

    /// @notice Transfers ownership of the contract to a new owner
    /// @param newOwner The address of the new owner
    function changeOwner(address newOwner) external onlyOwner {
        require(newOwner != address(0), "Invalid new owner address");

        emit OwnershipTransferred(owner, newOwner);
        owner = newOwner;
    }

    /// @notice Returns the ETH balance of the contract
    /// @return The current balance in wei
    function getContractBalance() external view returns (uint256) {
        return address(this).balance;
    }
}

